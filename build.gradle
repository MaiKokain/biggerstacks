buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

version = "$shortMinecraftVersion-$modVersion"
group = 'portb'
archivesBaseName = 'biggerstacks'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: minecraftVersion

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            args(["--username", "Dev###"])

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('serverrun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('gametestrun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('datarun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'biggerstacks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "biggerstacks.refmap.json"

    config "biggerstacks.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()

    maven { // IE & CT
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven { // JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { //Refined storage
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "github_is_stupid"
            password = "\u0067hp_oGjcDFCn8jeTzIj" + /*why do i have to put this here?*/"4Ke9pLoEVtpnZMP4VQgaX"
        }
    }
    maven { //Applied energy sticks 2
        url = uri("https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2")
        credentials {
            username = "github_is_stupid"
            password = "\u0067hp_oGjcD" /*im blue daba de daba di*/ + "FCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    def cm = "curse.maven"

    //
    // Compile only dependencies
    //
    [
            "appeng:appliedenergistics2:11.1.3",
            "blusunrize.immersiveengineering:ImmersiveEngineering:1.18.2-8.0.2-pre.9",
            "$cm:Mekansim-268560:3833669",                                             //https://www.curseforge.com/minecraft/mc-mods/mekanism/files/
            "$cm:ShetiPhianCore-71738:3832652",                                        //https://www.curseforge.com/minecraft/mc-mods/shetiphiancore/files/
    ].forEach { dep -> compileOnly fg.deobf(dep) }

    compileOnly fg.deobf("com.refinedmods:refinedstorage:1.10.2") { transitive false }

    //
    // CompileOnly deps that do not need fg.debof
    //
    [
            "$cm:ColossalChests-237875:3768513", //https://www.curseforge.com/minecraft/mc-mods/colossal-chests/files (deobf)
            "$cm:CyclopsCore-232758:3832120",    //https://www.curseforge.com/minecraft/mc-mods/cyclops-core/files (deobf)
            // Maven local deps
            "wolforce.playertabs:playertabs:1.0:deobf",
            "com.almostreliable.lazierae2:lazierae2:1.18.2-3.0.2:deobf",
            "de.ellpeck.prettypipes:PrettyPipes:1.10.4:deobf",
            "com.lothrazar.cyclic:Cyclic:1.18.2-1.7.2:deobf",
            "slimeknights.mantle:Mantle:1.18.2-1.9.DEV.6cb98c6:deobf",
            "edivad.dimstorage:DimStorage-1.18.2:6.1.0:deobf",
            "vazkii.quark:Quark:3.2-359:deobf",
            "slimeknights.tconstruct:TConstruct:1.18.2-3.5.1.DEV.5dfa77d74:deobf",
            "me.desht:modular-routers-1.18.1:9.0.2-CUSTOM:deobf",
            "com.github.mcjty:rftoolsstorage:1.18-3.0.8:deobf",
            "com.github.mcjty:rftoolsbase:1.18-3.0.9:deobf",
            "com.github.mcjty:rftoolsutility:1.18-4.0.16:deobf",
            "com.github.mcjty:mcjtylib:1.18-6.0.15:deobf",
            "com.github.mcjty:xnet:1.18-4.0.5:deobf",
            "sophisticatedbackpacks:sophisticatedbackpacks:1.18.2-3.17.9.-alpha:deobf",
            "sophisticatedcore:sophisticatedcore:1.18.2-0.3.6.-alpha:deobf",
            "com.buuz135:industrial-foregoing:1.18.2-3.3.1.4:deobf",
            "com.hrznstudio:titanium:1.18.2-3.5.6:deobf",
            "org.squiddev:cc-tweaked-1.18.2:1.100.8:deobf",
    ].forEach { dep -> compileOnly(dep) }

    //
    // Implementation dependencies
    // Used for testing
//    [
//
//    ].forEach { dep -> implementation fg.deobf(dep) }

    //
    // Runtime only dependencies
    //
    [
            "com.blamejared.crafttweaker:CraftTweaker-forge-1.18.2:9.1.164",
            "mezz.jei:jei-1.18.2:9.7.0.194",
            //"$cm:ConfigMenus-544048:3671318",            //https://www.curseforge.com/minecraft/mc-mods/config-menus-forge/files/
            //"$cm:BetterModsButton-541584:3773500",       //https://www.curseforge.com/minecraft/mc-mods/better-mods-button/files/
    ].forEach { dep -> runtimeOnly fg.deobf(dep) }

    library "portb:BiggerStacksConfigLib:1.3"
    library("com.thoughtworks.xstream:xstream:1.4.19"){
        //we do not want xstream's built in parser. We will use stax.
        exclude group: 'io.github.x-stream', module: 'mxparser'
    }
    //
    // Annotation processor
    //
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    // Include all of the jars from the bundled configuration in our jar
    from configurations.library.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes([
                "Specification-Title"     : "biggerstacks",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion.get(),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}