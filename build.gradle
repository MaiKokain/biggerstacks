import java.nio.file.Paths

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'portb.gradle.MinecraftSubmoduleDependencyPlugin' version "1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'

//core version-configlib version-transformerlib version
version = "$shortMinecraftVersion-$modVersion"
group = 'portb'
archivesBaseName = 'biggerstacks'

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'official', version: minecraftVersion

    //accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg') // Currently, this location cannot be changed from the default.

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            args(["--username", "Dev###"])

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('serverrun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('gametestrun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('datarun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'biggerstacks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "biggerstacks.refmap.json"

    config "biggerstacks.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()

    maven { // JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { //Refined storage
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "github_is_stupid"
            password = "\u0067hp_oGjcDFCn8jeTzIj" + /*why do i have to put this here?*/"4Ke9pLoEVtpnZMP4VQgaX"
        }
    }
    maven { //Applied energy sticks 2
        url = uri("https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2")
        credentials {
            username = "github_is_stupid"
            password = "\u0067hp_oGjcD" /*im blue daba de daba di*/ + "FCn8jeTzIj4Ke9pLoEVtpnZMP4VQgaX"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

submodules {
    submodulesDirectory = Paths.get(rootDir.toString(), "submodules")

    "Applied-Energistics-2" {
        //disable spotless (it causes build errors because npm isn't installed)
        customGradleCode = """
         afterEvaluate{
             tasks.spotlessJava.enabled = false
             tasks.spotlessJavaCheck.enabled = false
             tasks.spotlessJson.enabled = false
         }
        """.stripIndent()
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    def cm = "curse.maven"

    runtimeOnly fg.deobf("mezz.jei:jei-1.18.2:9.7.1.255")


    //
    // Libraries
    //

    library("portb:BiggerStacksConfigLib:$configLibVersion", "portb:BiggerStacksTransformerLib:$transformerLibVersion", "portb:SimpleLoggerWrapper:$simpleLoggerWrapperVersion")

    library("com.thoughtworks.xstream:xstream:1.4.19") {
        //we do not want xstream's built in parser. We will use stax.
        exclude group: 'io.github.x-stream', module: 'mxparser'
    }

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {

    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    // Include all of the jars from the bundled configuration in our jar
    from(configurations.library.asFileTree.files.collect { zipTree(it).matching {
        //try to reduce bloat from classes I never use
        exclude("**/com/thoughtworks/xstream/io/json/**")
        exclude("**/com/thoughtworks/xstream/io/binary/**")
        exclude("**/com/thoughtworks/xstream/io/xml/Sax*.class")
        exclude("**/com/thoughtworks/xstream/io/xml/Xpp*.class")
        exclude("**/com/thoughtworks/xstream/io/xml/Dom*.class")
        exclude("**/com/thoughtworks/xstream/io/xml/JDom*.class")
        exclude("**/com/thoughtworks/xstream/io/xml/KXml*.class")

        exclude("**/com/thoughtworks/xstream/converters/javabean/**")
    } })


    manifest {
        attributes([
                "Specification-Title"        : "biggerstacks",
                "Implementation-Title"       : project.name,
                "Implementation-Version"     : project.jar.archiveVersion.get(),
                "Implementation-Timestamp"   : new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "TransformerLib-Version"     : transformerLibVersion,
                "ConfigLib-Version"          : configLibVersion,
                "SimpleLoggerWrapper-Version": simpleLoggerWrapperVersion
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}