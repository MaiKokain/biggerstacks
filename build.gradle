buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.spongepowered.mixin'
apply plugin: 'idea'

group = 'PORTB'
def modversion = version = '1.18-2.5'

java {
    archivesBaseName = 'biggerstacks'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: 'official', version: '1.18.1'

    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'verbose'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'verbose'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'biggerstacks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "biggerstacks.refmap.json"

    config "biggerstacks.mixins.json"
}

sourceSets.main.resources { srcDir 'src/generated/resources' }


repositories {
    mavenCentral()
    maven {	// IE & CT Files
        name = "BlameJared"
        url = "https://maven.blamejared.com/"
    }
    maven { // JEI & Tinkers
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }
    maven { //Refined storage
        url = uri("https://maven.pkg.github.com/refinedmods/refinedstorage")
        credentials {
            username = "githubisstupid"
            password = "\u0067hp_pnP5hVDYXXhhXwe21IEkrUzGjquUJL0xjLzb"
        }
    }
    maven { //Applied energy sticks 2
        url = uri("https://maven.pkg.github.com/AppliedEnergistics/Applied-Energistics-2")
        credentials {
            username = "githubisstupid"
            password = "\u0067hp_pnP5hVDYXXhhXwe21IEkrUzGjquUJL0xjLzb"
        }
    }
    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.18.1-39.0.40'

    // Real mod deobf dependency examples - these get remapped to your current mappings
    // compileOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}:api") // Adds JEI API as a compile dependency
    // runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}:${jei_version}") // Adds the full JEI mod as a runtime dependency
    // implementation fg.deobf("com.tterrag.registrate:Registrate:MC${mc_version}-${registrate_version}") // Adds registrate as a dependency

    // Examples using mod jars from ./libs
    // implementation fg.deobf("blank:coolmod-${mc_version}:${coolmod_version}")

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

    var modularRouters = "curse.maven:ModularRouters-250294:3574035"
    var ie = "blusunrize.immersiveengineering:ImmersiveEngineering:1.18.1-7.1.0-145"
    var jei = "mezz.jei:jei-1.18.1:9.2.1.69"
    var rs = "com.refinedmods:refinedstorage:1.10.0-beta.4"
    var ae2 = "curse.maven:appliedenergistics2-223794:3590239"
    var cyclic = "curse.maven:Cyclic-239286:3594244"
    var mcJtyLib = "curse.maven:McJtyLib-233105:3604742"
    var rftoolsBase = "curse.maven:RFToolsBase-326041:3603065"
    var rftoolsStorage = "curse.maven:RFToolsBase-350006:3603059"
    var rftoolsUtility = "curse.maven:RFToolsUtility-342466:3604743"
    var xnet = "curse.maven:XNet-260912:3603062"
    var dimStorage = "curse.maven:DimStorage-353882:3569750"
    var prettyPipes = "curse.maven:PrettyPipes-376737:3582953"

    var minecolonies = "curse.maven:MineColonies-245506:3599965"
    var structurize = "curse.maven:Structurize-298744:3564388"
    var domumOrnamentum = "curse.maven:DomumOrnamentum-527361:3561327"
    var multipiston = "curse.maven:multipiston-303278:3543720"
    var blockui = "curse.maven:blockui-522992:3561693"

    implementation fg.deobf(ie)
    implementation fg.deobf(jei)
    implementation fg.deobf(rs) { transitive false }
    implementation fg.deobf(ae2)
    implementation fg.deobf(modularRouters)
    implementation fg.deobf(cyclic)
    implementation fg.deobf(mcJtyLib)
    implementation fg.deobf(rftoolsUtility)
    implementation fg.deobf(rftoolsBase)
    implementation fg.deobf(rftoolsStorage)
    implementation fg.deobf(xnet)
    implementation fg.deobf(dimStorage)
    implementation fg.deobf(prettyPipes)

    runtimeOnly fg.deobf(minecolonies)
    runtimeOnly fg.deobf(structurize)
    runtimeOnly fg.deobf(domumOrnamentum)
    runtimeOnly fg.deobf(multipiston)
    runtimeOnly fg.deobf(blockui)

    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "biggerstacks",
                //"Specification-Vendor": "biggerstacks authors",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                //"Implementation-Vendor": "biggerstacks authors",
                "Implementation-Version": modversion,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')
