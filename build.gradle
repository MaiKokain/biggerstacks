buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = 'https://repo.spongepowered.org/repository/maven-public/' }
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'
    }
}

plugins {
    id 'eclipse'
    id 'maven-publish'
    id 'portb.gradle.MinecraftSubmoduleDependencyPlugin' version "1.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'
apply plugin: 'org.spongepowered.mixin'

version = "$minecraftVersion-$modVersion"
group = 'PORTB'
archivesBaseName = 'biggerstacks'

java.toolchain.languageVersion = JavaLanguageVersion.of(8)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"

minecraft {
    mappings channel: 'parchment', version: "$parchmentVersion-$minecraftVersion"

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            property 'mixin.env.remapRefMap', 'true'
            property 'mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg"

            args(["--username", "Dev###"])

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('serverrun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('gametestrun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'biggerstacks'

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('datarun')

            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'biggerstacks', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                biggerstacks {
                    source sourceSets.main
                }
            }
        }
    }
}

mixin {
    add sourceSets.main, "biggerstacks.refmap.json"

    config "biggerstacks.mixins.json"
}

submodules {
    submodulesDirectory = file("submodules")

    def use_java_8 = "-Dorg.gradle.java.home=C:\\PROGRA~1\\ECLIPS~1\\jdk-8.0.322.6-hotspot"

    defaultOptions {
        gradleArgs = use_java_8
    }

    repos {
        //these mods use snapshot mapping (incompatible) and must be compiled with reobf enabled
        "Applied-Energistics-2" {
            gradleArgs = use_java_8

            //disable spotless (it causes build errors because npm isn't installed)
            customGradleCode = """
                afterEvaluate {
                    tasks.spotlessJava.enabled = false
                    tasks.spotlessJavaCheck.enabled = false
                    tasks.spotlessJson.enabled = false
                }
            """

            reobfTaskName = "named(\"reobfJar\").get()"
            tasks = ["build"]
            enableDeobf = false
        }

        Cyclic {
            enableDeobf = false
            gradleArgs = use_java_8
        }

        PrettyPipes {
            enableDeobf = false
            gradleArgs = use_java_8

            //need to manually enable reobfJar for this one...
            customGradleCode = """
                jar.finalizedBy('reobfJar') 
            """.stripIndent()
        }

        refinedstorage {
            enableDeobf = false
            gradleArgs = use_java_8
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenCentral()
    mavenLocal()

    maven { // JEI
        name 'DVS1 Maven FS'
        url 'https://dvs1.progwml6.com/files/maven'
    }

    maven {
        url "https://cursemaven.com"
        content {
            includeGroup "curse.maven"
        }
    }
}

configurations {
    library
    implementation.extendsFrom library
}

minecraft.runs.all {
    lazyToken('minecraft_classpath') {
        configurations.library.copyRecursive().resolve().collect { it.absolutePath }.join(File.pathSeparator)
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:$minecraftVersion-$forgeVersion"

    runtimeOnly fg.deobf("mezz.jei:jei-1.16.5:7.7.1.153")

    library("portb:BiggerStacksConfigLib:$configLibVersion", "portb:BiggerStacksTransformerLib:$transformerLibVersion", "portb:SimpleLoggerWrapper:$simpleLoggerWrapperVersion")
    library("com.thoughtworks.xstream:xstream:1.4.20") {
        //we do not want xstream's built in parser. We will use stax.
        exclude group: 'io.github.x-stream', module: 'mxparser'
    }

    //
    // Annotation processor
    //
    annotationProcessor 'org.spongepowered:mixin:0.8.5:processor'
}

jar {
    // Include all of the jars from the bundled configuration in our jar
    from configurations.library.asFileTree.files.collect { zipTree(it) }

    manifest {
        attributes([
                "Specification-Title"     : "biggerstacks",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion.get(),
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
